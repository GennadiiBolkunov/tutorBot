# handlers/assignments.py
from aiogram import types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from datetime import datetime, timedelta
import aiosqlite

from database.db_handler import DatabaseHandler
from states.registration import AssignmentStates, SolutionStates, GradingStates, FileStates
from utils.file_utils import FileProcessor

db = DatabaseHandler()


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===

async def create_assignment_command(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    await message.answer("üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(AssignmentStates.waiting_for_title)


async def process_assignment_title(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:")
        return

    await state.update_data(title=message.text.strip())
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—É—Å–ª–æ–≤–∏–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å):")
    await state.set_state(AssignmentStates.waiting_for_description)


async def process_assignment_description(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(description=message.text.strip())
    await message.answer(
        "üéì –î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–µ?\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ (1-11) –∏–ª–∏ 0 –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤:"
    )
    await state.set_state(AssignmentStates.waiting_for_grade)


async def process_assignment_grade(message: types.Message, state: FSMContext):
    try:
        grade = int(message.text)
        if not 0 <= grade <= 11:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 11 (0 = –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤):")
        return

    await state.update_data(grade_level=grade)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –õ–µ–≥–∫–æ", callback_data="difficulty_easy"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–µ", callback_data="difficulty_medium"),
            InlineKeyboardButton(text="üî¥ –°–ª–æ–∂–Ω–æ", callback_data="difficulty_hard")
        ]
    ])

    await message.answer("‚ö° –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è:", reply_markup=keyboard)


async def process_difficulty_choice(callback: CallbackQuery, state: FSMContext):
    difficulty_map = {
        "difficulty_easy": "easy",
        "difficulty_medium": "medium",
        "difficulty_hard": "hard"
    }

    difficulty = difficulty_map.get(callback.data)
    if not difficulty:
        return

    await state.update_data(difficulty=difficulty)
    await callback.message.edit_text(
        f"‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}\n\n"
        "üìÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫ —Å–¥–∞—á–∏? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    await state.set_state(AssignmentStates.waiting_for_due_date)


async def process_due_date(message: types.Message, state: FSMContext):
    due_date = None

    if message.text.lower() not in ['–Ω–µ—Ç', 'no', 'skip', '-']:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            date_str = message.text.strip()
            due_date = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
            return

    await state.update_data(due_date=due_date)

    # –ù–û–í–û–ï: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="add_assignment_files"),
            InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="create_assignment_without_files")
        ]
    ])

    await message.answer(
        "üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞–Ω–∏—é?\n"
        "(PDF, DOC, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–¥.)",
        reply_markup=keyboard
    )


async def handle_add_assignment_files(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ –∑–∞–¥–∞–Ω–∏—é"""
    await state.update_data(assignment_files=[])  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤

    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "‚Ä¢ PDF (–¥–æ 20 –ú–ë)\n"
        "‚Ä¢ DOC/DOCX (–¥–æ 10 –ú–ë)\n"
        "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è JPG/PNG (–¥–æ 5 –ú–ë)\n"
        "‚Ä¢ TXT (–¥–æ 1 –ú–ë)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done"
    )
    await state.set_state(FileStates.waiting_for_assignment_files)


async def handle_create_assignment_without_files(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–æ–≤"""
    await create_assignment_final(callback.message, state, [])


async def process_assignment_files(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è"""
    if message.text == "/done":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        data = await state.get_data()
        assignment_files = data.get('assignment_files', [])
        await create_assignment_final(message, state, assignment_files)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    files_data = await FileProcessor.process_message_files(message)

    if not files_data:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–ø–∏—Å–∫—É
    data = await state.get_data()
    assignment_files = data.get('assignment_files', [])
    assignment_files.extend(files_data)
    await state.update_data(assignment_files=assignment_files)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    files_text = "\n".join([f"‚úÖ {f['file_name']}" for f in files_data])
    total_files = len(assignment_files)

    await message.answer(
        f"‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{files_text}\n\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )


async def create_assignment_final(message: types.Message, state: FSMContext, files_data: list):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    assignment_id = await db.create_assignment(
        title=data['title'],
        description=data['description'],
        grade_level=data['grade_level'],
        difficulty=data['difficulty'],
        created_by=message.from_user.id,
        due_date=data.get('due_date')
    )

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞–Ω–∏—é
    if files_data:
        file_db_ids = [f['db_id'] for f in files_data]
        await FileProcessor.attach_files_to_object(file_db_ids, 'assignment', assignment_id)

    grade_text = f"–∫–ª–∞—Å—Å {data['grade_level']}" if data['grade_level'] > 0 else "–≤—Å–µ –∫–ª–∞—Å—Å—ã"
    due_text = f"\nüìÖ –°—Ä–æ–∫: {data['due_date'][:10]}" if data.get('due_date') else ""
    files_text = f"\nüìé –§–∞–π–ª–æ–≤: {len(files_data)}" if files_data else ""

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üéì –î–ª—è: {grade_text}\n"
        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['difficulty']}{due_text}{files_text}\n\n"
        f"ID –∑–∞–¥–∞–Ω–∏—è: {assignment_id}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
    from handlers.assignments import notify_students_new_assignment
    notification_data = await notify_students_new_assignment(assignment_id, data)

    await state.clear()
    return notification_data


async def show_all_assignments(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    assignments = await db.get_all_assignments()

    if not assignments:
        await message.answer("üìã –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_assignment –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return

    text = "üìö –í—Å–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    for assignment in assignments:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if assignment['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ"
        grade_text = f"–∫–ª–∞—Å—Å {assignment['grade_level']}" if assignment['grade_level'] > 0 else "–≤—Å–µ –∫–ª–∞—Å—Å—ã"
        due_text = f" (–¥–æ {assignment['due_date'][:10]})" if assignment['due_date'] else ""

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        files = await db.get_object_files('assignment', assignment['id'])
        files_text = f" üìé{len(files)}" if files else ""

        text += (
            f"üÜî {assignment['id']} - {assignment['title']}\n"
            f"üéì {grade_text} | ‚ö° {assignment['difficulty']} | {status}{due_text}{files_text}\n"
            f"üìÖ {assignment['created_date'][:10]}\n\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 4000:
        parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(text)


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ß–ï–ù–ò–ö–û–í ===

async def show_my_assignments(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    user_id = message.from_user.id

    if not await db.is_user_registered(user_id):
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    user_data = await db.get_user(user_id)
    assignments = await db.get_assignments_for_grade(user_data['grade'])

    if not assignments:
        await message.answer("üìã –î–ª—è –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    for assignment in assignments:
        due_text = f" üìÖ –¥–æ {assignment['due_date'][:10]}" if assignment['due_date'] else ""
        difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
        files = await db.get_object_files('assignment', assignment['id'])
        files_text = f" üìé{len(files)}" if files else ""

        text += (
            f"üÜî {assignment['id']} - {assignment['title']}\n"
            f"{difficulty_emoji.get(assignment['difficulty'], '‚ö°')} {assignment['difficulty']}{due_text}{files_text}\n"
            f"üìÑ {assignment['description'][:100]}{'...' if len(assignment['description']) > 100 else ''}\n\n"
        )

    text += "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è: /assignment <ID>\n–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è: /solve <ID>"

    if len(text) > 4000:
        parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(text)


async def show_assignment_detail(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = message.from_user.id

    if not await db.is_user_registered(user_id) and not await db.is_admin(user_id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        assignment_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /assignment <ID –∑–∞–¥–∞–Ω–∏—è>")
        return

    assignment = await db.get_assignment_by_id(assignment_id)

    if not assignment:
        await message.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —É—á–µ–Ω–∏–∫–∞
    if not await db.is_admin(user_id):
        user_data = await db.get_user(user_id)
        if assignment['grade_level'] != 0 and assignment['grade_level'] != user_data['grade']:
            await message.answer("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞.")
            return

    difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}
    grade_text = f"–∫–ª–∞—Å—Å {assignment['grade_level']}" if assignment['grade_level'] > 0 else "–≤—Å–µ –∫–ª–∞—Å—Å—ã"
    due_text = f"\nüìÖ –°—Ä–æ–∫ —Å–¥–∞—á–∏: {assignment['due_date'][:16]}" if assignment['due_date'] else ""

    text = (
        f"üìù {assignment['title']}\n\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:\n{assignment['description']}\n\n"
        f"üéì –î–ª—è: {grade_text}\n"
        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_emoji.get(assignment['difficulty'], '‚ö°')} {assignment['difficulty']}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {assignment['created_date'][:16]}{due_text}"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–¥–∞–Ω–∏—è
    files = await db.get_object_files('assignment', assignment_id)
    if files:
        text += f"\n\n{FileProcessor.format_file_list(files)}"

    await message.answer(text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if files:
        await send_files_to_user(message, files, "–§–∞–π–ª—ã –∑–∞–¥–∞–Ω–∏—è:")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    if await db.is_admin(user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –†–µ—à–µ–Ω–∏—è", callback_data=f"solutions_{assignment_id}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_assignment_{assignment_id}")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"solve_{assignment_id}")]
        ])

    await message.answer("–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=keyboard)


async def start_solution_submission(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ—à–µ–Ω–∏—è"""
    assignment_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    if not await db.is_user_registered(user_id):
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    assignment = await db.get_assignment_by_id(assignment_id)
    if not assignment:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await state.update_data(assignment_id=assignment_id, solution_files=[])
    await callback.message.edit_text(
        f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è: {assignment['title']}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º. –ú–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å:\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
        "‚Ä¢ –§–æ—Ä–º—É–ª—ã –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –û—Ç–≤–µ—Ç\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ —Ä–µ—à–µ–Ω–∏—è"
    )
    await state.set_state(SolutionStates.waiting_for_solution)


async def process_solution_submission(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    data = await state.get_data()
    assignment_id = data['assignment_id']
    user_id = message.from_user.id

    await state.update_data(solution_text=message.text.strip())

    # –ù–û–í–û–ï: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Ä–µ—à–µ–Ω–∏—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="add_solution_files"),
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="submit_solution_without_files")
        ]
    ])

    await message.answer(
        "üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Ä–µ—à–µ–Ω–∏—é?\n"
        "(—Å–∫–∞–Ω—ã, —Ñ–æ—Ç–æ —Ä–µ—à–µ–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)",
        reply_markup=keyboard
    )


async def handle_add_solution_files(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ —Ä–µ—à–µ–Ω–∏—é"""
    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∫ —Ä–µ—à–µ–Ω–∏—é\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done"
    )
    await state.set_state(FileStates.waiting_for_solution_files)


async def handle_submit_solution_without_files(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–æ–≤"""
    await submit_solution_final(callback.message, state, [])


async def process_solution_files(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è"""
    if message.text == "/done":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        data = await state.get_data()
        solution_files = data.get('solution_files', [])
        await submit_solution_final(message, state, solution_files)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    files_data = await FileProcessor.process_message_files(message)

    if not files_data:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–ø–∏—Å–∫—É
    data = await state.get_data()
    solution_files = data.get('solution_files', [])
    solution_files.extend(files_data)
    await state.update_data(solution_files=solution_files)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    files_text = "\n".join([f"‚úÖ {f['file_name']}" for f in files_data])
    total_files = len(solution_files)

    await message.answer(
        f"‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{files_text}\n\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )


async def submit_solution_final(message: types.Message, state: FSMContext, files_data: list):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Å —Ñ–∞–π–ª–∞–º–∏"""
    data = await state.get_data()
    assignment_id = data['assignment_id']
    user_id = message.from_user.id

    result_id = await db.submit_solution(user_id, assignment_id, data['solution_text'])

    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫ —Ä–µ—à–µ–Ω–∏—é
    if files_data:
        file_db_ids = [f['db_id'] for f in files_data]
        await FileProcessor.attach_files_to_object(file_db_ids, 'solution', result_id)

    assignment = await db.get_assignment_by_id(assignment_id)
    files_text = f"\nüìé –§–∞–π–ª–æ–≤: {len(files_data)}" if files_data else ""

    await message.answer(
        f"‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        f"üìù –ó–∞–¥–∞–Ω–∏–µ: {assignment['title']}\n"
        f"üÜî ID —Ä–µ—à–µ–Ω–∏—è: {result_id}{files_text}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏
    from handlers.assignments import notify_admin_new_solution
    notification_data = await notify_admin_new_solution(user_id, assignment_id, result_id)

    await state.clear()
    return notification_data


# === –°–ò–°–¢–ï–ú–ê –û–¶–ï–ù–ò–í–ê–ù–ò–Ø ===

async def show_ungraded_solutions(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    solutions = await db.get_ungraded_solutions()

    if not solutions:
        await message.answer("‚úÖ –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!")
        return

    for solution in solutions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –∑–∞ —Ä–∞–∑
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ä–µ—à–µ–Ω–∏—è
        files = await db.get_object_files('solution', solution['id'])
        files_text = f" üìé{len(files)}" if files else ""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"grade_{solution['id']}"),
                InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"view_solution_{solution['id']}")
            ]
        ])

        text = (
            f"üìù {solution['title']}\n"
            f"üë§ {solution['first_name']} {solution['last_name']} ({solution['grade_level']} –∫–ª–∞—Å—Å)\n"
            f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {solution['completed_date'][:16]}{files_text}\n"
            f"üÜî ID: {solution['id']}"
        )

        await message.answer(text, reply_markup=keyboard)

    if len(solutions) > 5:
        await message.answer(f"–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(solutions)} —Ä–µ—à–µ–Ω–∏–π.")


async def view_solution_detail(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    solution_id = int(callback.data.split("_")[2])

    solutions = await db.get_ungraded_solutions()
    solution = next((s for s in solutions if s['id'] == solution_id), None)

    if not solution:
        await callback.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    text = (
        f"üìù {solution['title']}\n"
        f"üë§ {solution['first_name']} {solution['last_name']}\n\n"
        f"üìÑ –†–µ—à–µ–Ω–∏–µ:\n{solution['solution_text']}\n\n"
        f"üìÖ {solution['completed_date'][:16]}"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ä–µ—à–µ–Ω–∏—è
    files = await db.get_object_files('solution', solution_id)
    if files:
        text += f"\n\n{FileProcessor.format_file_list(files)}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"grade_{solution['id']}")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if files:
        await send_files_to_user(callback.message, files, "–§–∞–π–ª—ã —Ä–µ—à–µ–Ω–∏—è:")


async def start_grading(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"""
    solution_id = int(callback.data.split("_")[1])

    await state.update_data(solution_id=solution_id, grade_files=[])
    await callback.message.edit_text(
        "üìä –û—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–±–∞–ª–ª>/<–º–∞–∫—Å–∏–º—É–º>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 8/10 –∏–ª–∏ 15/20"
    )
    await state.set_state(GradingStates.waiting_for_score)


async def process_grading_score(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –æ—Ü–µ–Ω–∫—É
        score_text = message.text.strip()
        if '/' not in score_text:
            raise ValueError

        score, max_score = map(int, score_text.split('/'))

        if score < 0 or max_score <= 0 or score > max_score:
            raise ValueError

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <–±–∞–ª–ª>/<–º–∞–∫—Å–∏–º—É–º> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8/10)")
        return

    await state.update_data(score=score, max_score=max_score)
    await message.answer("üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ü–µ–Ω–∫–µ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(GradingStates.waiting_for_comment)


async def process_grading_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ü–µ–Ω–∫–µ"""
    comment = message.text.strip() if message.text.strip() != '-' else ""

    await state.update_data(comment=comment)

    # –ù–û–í–û–ï: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ—Ü–µ–Ω–∫–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="add_grade_files"),
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="submit_grade_without_files")
        ]
    ])

    await message.answer(
        "üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ—Ü–µ–Ω–∫–µ?\n"
        "(–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)",
        reply_markup=keyboard
    )


async def handle_add_grade_files(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ –æ—Ü–µ–Ω–∫–µ"""
    await callback.message.edit_text(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∫ –æ—Ü–µ–Ω–∫–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done"
    )
    await state.set_state(FileStates.waiting_for_grade_files)


async def handle_submit_grade_without_files(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –±–µ–∑ —Ñ–∞–π–ª–æ–≤"""
    await submit_grade_final(callback.message, state, [])


async def process_grade_files(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    if message.text == "/done":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        data = await state.get_data()
        grade_files = data.get('grade_files', [])
        await submit_grade_final(message, state, grade_files)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    files_data = await FileProcessor.process_message_files(message)

    if not files_data:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ —Å–ø–∏—Å–∫—É
    data = await state.get_data()
    grade_files = data.get('grade_files', [])
    grade_files.extend(files_data)
    await state.update_data(grade_files=grade_files)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
    files_text = "\n".join([f"‚úÖ {f['file_name']}" for f in files_data])
    total_files = len(grade_files)

    await message.answer(
        f"‚úÖ –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n{files_text}\n\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
    )


async def submit_grade_final(message: types.Message, state: FSMContext, files_data: list):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏"""
    data = await state.get_data()
    solution_id = data['solution_id']
    score = data['score']
    max_score = data['max_score']
    comment = data['comment']

    success = await db.grade_solution(solution_id, score, max_score, comment)

    if success:
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∫ –æ—Ü–µ–Ω–∫–µ
        if files_data:
            file_db_ids = [f['db_id'] for f in files_data]
            await FileProcessor.attach_files_to_object(file_db_ids, 'grade', solution_id)

        percentage = round((score / max_score) * 100, 1)
        files_text = f"\nüìé –§–∞–π–ª–æ–≤: {len(files_data)}" if files_data else ""

        await message.answer(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{max_score} ({percentage}%)\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}{files_text}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        from handlers.assignments import notify_student_grade
        notification_data = await notify_student_grade(solution_id, score, max_score, comment)

        await state.clear()
        return notification_data  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ main
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.")
        await state.clear()


# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –£–ß–ï–ù–ò–ö–û–í ===

async def show_my_progress(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞"""
    user_id = message.from_user.id

    if not await db.is_user_registered(user_id):
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    solutions = await db.get_user_solutions(user_id)
    stats = await db.get_user_stats(user_id)

    if not solutions:
        await message.answer("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.")
        return

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {stats['total_assignments']}\n"
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats['graded_assignments']}\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['avg_percentage']}%\n\n"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if stats['difficulty_stats']:
        text += "üìä –ü–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n"
        difficulty_names = {"easy": "üü¢ –õ–µ–≥–∫–æ", "medium": "üü° –°—Ä–µ–¥–Ω–µ", "hard": "üî¥ –°–ª–æ–∂–Ω–æ"}
        for difficulty, data in stats['difficulty_stats'].items():
            name = difficulty_names.get(difficulty, difficulty)
            text += f"{name}: {data['avg_percentage']}% ({data['count']} –∑–∞–¥–∞–Ω–∏–π)\n"
        text += "\n"

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
    text += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:\n"
    for solution in solutions[:5]:
        status = "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ" if solution['score'] is None else f"‚úÖ {solution['score']}/{solution['max_score']}"

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ —Ä–µ—à–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏
        solution_files = await db.get_object_files('solution', solution['id'])
        grade_files = await db.get_object_files('grade', solution['id'])
        files_info = ""
        if solution_files:
            files_info += f" üìé{len(solution_files)}"
        if grade_files and solution['score'] is not None:
            files_info += f" üìã{len(grade_files)}"

        text += f"‚Ä¢ {solution['title']} - {status}{files_info}\n"

    if len(solutions) > 5:
        text += f"\n–ò –µ—â–µ {len(solutions) - 5} —Ä–µ—à–µ–Ω–∏–π..."

    await message.answer(text)


async def show_solution_details(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    user_id = message.from_user.id

    if not await db.is_user_registered(user_id):
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–µ—à–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        solution_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /solution <ID —Ä–µ—à–µ–Ω–∏—è>")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    solutions = await db.get_user_solutions(user_id)
    solution = next((s for s in solutions if s['id'] == solution_id), None)

    if not solution:
        await message.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return

    status = "‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ" if solution[
                                    'score'] is None else f"‚úÖ {solution['score']}/{solution['max_score']} ({round((solution['score'] / solution['max_score']) * 100, 1)}%)"

    text = (
        f"üìù {solution['title']}\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {solution['completed_date'][:16]}\n\n"
        f"üìÑ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:\n{solution['solution_text']}"
    )

    if solution['comment'] and solution['score'] is not None:
        text += f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n{solution['comment']}"

    await message.answer(text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Ä–µ—à–µ–Ω–∏—è
    solution_files = await db.get_object_files('solution', solution_id)
    if solution_files:
        await message.answer(f"üìé –í–∞—à–∏ —Ñ–∞–π–ª—ã –∫ —Ä–µ—à–µ–Ω–∏—é:")
        await send_files_to_user(message, solution_files, "")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ü–µ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if solution['score'] is not None:
        grade_files = await db.get_object_files('grade', solution_id)
        if grade_files:
            await message.answer(f"üìã –§–∞–π–ª—ã –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
            await send_files_to_user(message, grade_files, "")


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def send_files_to_user(message: types.Message, files: list, caption: str = ""):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        for file_info in files:
            file_caption = f"{caption}\nüìÑ {file_info['file_name']}" if caption else file_info['file_name']

            if file_info['file_type'] == 'photo':
                await message.answer_photo(
                    photo=file_info['file_id'],
                    caption=file_caption[:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                )
            else:
                await message.answer_document(
                    document=file_info['file_id'],
                    caption=file_caption[:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram
                )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤: {str(e)}")


async def notify_students_new_assignment(assignment_id: int, assignment_data: dict):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
        all_users = await db.get_all_users()
        target_users = []

        if assignment_data['grade_level'] == 0:
            target_users = all_users  # –î–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤
        else:
            target_users = [u for u in all_users if u['grade'] == assignment_data['grade_level']]

        difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}
        notification_data = {
            'assignment_id': assignment_id,
            'title': assignment_data['title'],
            'difficulty': assignment_data['difficulty'],
            'target_users': target_users,
            'has_files': len(assignment_data.get('assignment_files', [])) > 0
        }

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
        return notification_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏: {e}")
        return None


async def notify_admin_new_solution(user_id: int, assignment_id: int, result_id: int):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
    try:
        user_data = await db.get_user(user_id)
        assignment = await db.get_assignment_by_id(assignment_id)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ—à–µ–Ω–∏–∏
        solution_files = await db.get_object_files('solution', result_id)

        return {
            'user_data': user_data,
            'assignment': assignment,
            'result_id': result_id,
            'has_files': len(solution_files) > 0,
            'files_count': len(solution_files)
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        return None


async def notify_student_grade(solution_id: int, score: int, max_score: int, comment: str):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute("""
                SELECT r.user_id, a.title
                FROM results r
                JOIN assignments a ON r.assignment_id = a.id
                WHERE r.id = ?
            """, (solution_id,))
            result = await cursor.fetchone()

        if result:
            user_id, assignment_title = result
            percentage = round((score / max_score) * 100, 1)

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ—Ü–µ–Ω–∫–µ
            grade_files = await db.get_object_files('grade', solution_id)

            return {
                'user_id': user_id,
                'assignment_title': assignment_title,
                'score': score,
                'max_score': max_score,
                'percentage': percentage,
                'comment': comment,
                'has_files': len(grade_files) > 0,
                'files_count': len(grade_files)
            }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞: {e}")
        return None