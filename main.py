# main.py
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import os
import asyncio
import logging
from dotenv import load_dotenv

from database.db_handler import DatabaseHandler
from states.registration import RegistrationStates, AdminStates, AssignmentStates, SolutionStates, GradingStates
from handlers.assignments import (
    create_assignment_command, process_assignment_title, process_assignment_description,
    process_assignment_grade, process_difficulty_choice, process_due_date,
    show_all_assignments, show_my_assignments, show_assignment_detail,
    start_solution_submission, process_solution_submission,
    show_ungraded_solutions, view_solution_detail, start_grading,
    process_grading_score, process_grading_comment, show_my_progress,
    notify_students_new_assignment, notify_admin_new_solution, notify_student_grade
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à telegram_id –≤ .env

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = DatabaseHandler()


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===

@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await db.is_admin(user_id):
        await message.answer(
            "üë®‚Äçüè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/pending - –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "/users - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n"
            "/create_assignment - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
            "/assignments - –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "/ungraded - –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
    elif await db.is_user_registered(user_id):
        user_data = await db.get_user(user_id)
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_data['first_name']}!\n\n"
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "/assignments - –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è\n"
            "/progress - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞"
        )
    elif await db.has_pending_request(user_id):
        await message.answer(
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
    else:
        await message.answer(
            "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–∏—è –∫ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –†–∞–∫–∏—Ç–∏–Ω–æ–π!\n\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ /register –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"
        )


@dp.message(Command("register"))
async def register_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if await db.is_user_registered(user_id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    if await db.has_pending_request(user_id):
        await message.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
    await state.update_data(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name
    )

    await message.answer(
        f"üìù –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {message.from_user.first_name}!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:"
    )
    await state.set_state(RegistrationStates.waiting_for_last_name)


@dp.message(StateFilter(RegistrationStates.waiting_for_last_name))
async def process_last_name(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return

    await state.update_data(last_name=message.text.strip())
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è —Å–≤—è–∑–∏):")
    await state.set_state(RegistrationStates.waiting_for_phone)


@dp.message(StateFilter(RegistrationStates.waiting_for_phone))
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if len(phone) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    await state.update_data(phone=phone)
    await message.answer("üéì –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11):")
    await state.set_state(RegistrationStates.waiting_for_grade)


@dp.message(StateFilter(RegistrationStates.waiting_for_grade))
async def process_grade(message: types.Message, state: FSMContext):
    try:
        grade = int(message.text)
        if not 1 <= grade <= 11:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11:")
        return

    await state.update_data(grade=grade)
    await message.answer(
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
        "(–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏):"
    )
    await state.set_state(RegistrationStates.waiting_for_parent_contact)


@dp.message(StateFilter(RegistrationStates.waiting_for_parent_contact))
async def process_parent_contact(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π:")
        return

    await state.update_data(parent_contact=message.text.strip())
    await message.answer(
        "üí≠ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∑–∞—á–µ–º –≤–∞–º –Ω—É–∂–Ω—ã –∑–∞–Ω—è—Ç–∏—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?\n"
        "(–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º, —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫, –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º –∏ —Ç.–¥.)"
    )
    await state.set_state(RegistrationStates.waiting_for_motivation)


@dp.message(StateFilter(RegistrationStates.waiting_for_motivation))
async def process_motivation(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    data['motivation'] = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await db.create_registration_request(
        telegram_id=data['telegram_id'],
        username=data.get('username'),
        first_name=data['first_name'],
        last_name=data['last_name'],
        phone=data['phone'],
        grade=data['grade'],
        parent_contact=data['parent_contact'],
        motivation=data['motivation']
    )

    if success:
        await message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            "üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {data['first_name']} {data['last_name']}\n"
            f"–ö–ª–∞—Å—Å: {data['grade']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await notify_admin_new_request(data)
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ===

@dp.message(Command("pending"))
async def show_pending_requests(message: types.Message):
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    requests = await db.get_pending_requests()

    if not requests:
        await message.answer("üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    for req in requests:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{req['id']}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req['id']}")
            ]
        ])

        text = (
            f"üìã –ó–∞—è–≤–∫–∞ #{req['id']}\n"
            f"üë§ {req['first_name']} {req['last_name']}\n"
            f"üéì –ö–ª–∞—Å—Å: {req['grade']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']}\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª–∏: {req['parent_contact']}\n"
            f"üí≠ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {req['motivation']}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {req['request_date'][:16]}"
        )

        await message.answer(text, reply_markup=keyboard)


@dp.callback_query(F.data.startswith("approve_"))
async def approve_request(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    request_id = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    requests = await db.get_pending_requests()
    request_data = next((r for r in requests if r['id'] == request_id), None)

    if request_data and await db.approve_registration(request_id, "–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"):
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–∞!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request_data['first_name']} {request_data['last_name']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                request_data['telegram_id'],
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.\n"
                "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request_data['telegram_id']}: {e}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")


@dp.callback_query(F.data.startswith("reject_"))
async def reject_request(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    request_id = int(callback.data.split("_")[1])
    await state.update_data(reject_request_id=request_id)

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:")
    await state.set_state(AdminStates.waiting_for_rejection_reason)


@dp.message(StateFilter(AdminStates.waiting_for_rejection_reason))
async def process_rejection_reason(message: types.Message, state: FSMContext):
    if not await db.is_admin(message.from_user.id):
        return

    data = await state.get_data()
    request_id = data['reject_request_id']
    reason = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    requests = await db.get_pending_requests()
    request_data = next((r for r in requests if r['id'] == request_id), None)

    if request_data and await db.reject_registration(request_id, reason):
        await message.answer(f"‚ùå –ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                request_data['telegram_id'],
                f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –∏—Å–ø—Ä–∞–≤–∏–≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã."
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request_data['telegram_id']}: {e}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

    await state.clear()


@dp.message(Command("users"))
async def show_users(message: types.Message):
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    users = await db.get_all_users()

    if not users:
        await message.answer("üìã –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏:\n\n"
    for user in users:
        text += (
            f"üë§ {user['first_name']} {user['last_name']}\n"
            f"üéì –ö–ª–∞—Å—Å: {user['grade']}\n"
            f"üì± {user['phone']}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['registration_date'][:10]}\n\n"
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 4000:
        parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(text)


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ó–ê–î–ê–ù–ò–ô ===

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("create_assignment"))
async def create_assignment_handler(message: types.Message, state: FSMContext):
    await create_assignment_command(message, state)


@dp.message(StateFilter(AssignmentStates.waiting_for_title))
async def assignment_title_handler(message: types.Message, state: FSMContext):
    await process_assignment_title(message, state)


@dp.message(StateFilter(AssignmentStates.waiting_for_description))
async def assignment_description_handler(message: types.Message, state: FSMContext):
    await process_assignment_description(message, state)


@dp.message(StateFilter(AssignmentStates.waiting_for_grade))
async def assignment_grade_handler(message: types.Message, state: FSMContext):
    await process_assignment_grade(message, state)


@dp.callback_query(F.data.startswith("difficulty_"))
async def difficulty_handler(callback: CallbackQuery, state: FSMContext):
    await process_difficulty_choice(callback, state)


@dp.message(StateFilter(AssignmentStates.waiting_for_due_date))
async def due_date_handler(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    data = await state.get_data()
    due_date = None

    if message.text.lower() not in ['–Ω–µ—Ç', 'no', 'skip', '-']:
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            from datetime import datetime
            date_str = message.text.strip()
            due_date = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d %H:%M:%S")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
            return

    assignment_id = await db.create_assignment(
        title=data['title'],
        description=data['description'],
        grade_level=data['grade_level'],
        difficulty=data['difficulty'],
        created_by=message.from_user.id,
        due_date=due_date
    )

    grade_text = f"–∫–ª–∞—Å—Å {data['grade_level']}" if data['grade_level'] > 0 else "–≤—Å–µ –∫–ª–∞—Å—Å—ã"
    due_text = f"\nüìÖ –°—Ä–æ–∫: {due_date[:10]}" if due_date else ""

    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"üéì –î–ª—è: {grade_text}\n"
        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['difficulty']}{due_text}\n\n"
        f"ID –∑–∞–¥–∞–Ω–∏—è: {assignment_id}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
    notification_data = await notify_students_new_assignment(assignment_id, data)
    if notification_data:
        await send_assignment_notifications(notification_data)

    await state.clear()


@dp.message(Command("assignments"))
async def assignments_handler(message: types.Message):
    if await db.is_admin(message.from_user.id):
        await show_all_assignments(message)
    else:
        await show_my_assignments(message)


@dp.message(Command("assignment"))
async def assignment_detail_handler(message: types.Message):
    await show_assignment_detail(message)


@dp.message(Command("ungraded"))
async def ungraded_handler(message: types.Message):
    await show_ungraded_solutions(message)


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
@dp.message(Command("progress"))
async def progress_handler(message: types.Message):
    await show_my_progress(message)


# Callback handlers –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
@dp.callback_query(F.data.startswith("solve_"))
async def solve_handler(callback: CallbackQuery, state: FSMContext):
    await start_solution_submission(callback, state)


@dp.message(StateFilter(SolutionStates.waiting_for_solution))
async def solution_handler(message: types.Message, state: FSMContext):
    if not message.text or len(message.text.strip()) < 10:
        await message.answer("‚ùå –†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    data = await state.get_data()
    assignment_id = data['assignment_id']
    user_id = message.from_user.id

    result_id = await db.submit_solution(user_id, assignment_id, message.text.strip())
    assignment = await db.get_assignment_by_id(assignment_id)

    await message.answer(
        f"‚úÖ –†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        f"üìù –ó–∞–¥–∞–Ω–∏–µ: {assignment['title']}\n"
        f"üÜî ID —Ä–µ—à–µ–Ω–∏—è: {result_id}\n\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏
    notification_data = await notify_admin_new_solution(user_id, assignment_id, result_id)
    if notification_data:
        await send_solution_notification(notification_data)

    await state.clear()


@dp.callback_query(F.data.startswith("view_solution_"))
async def view_solution_handler(callback: CallbackQuery):
    await view_solution_detail(callback)


@dp.callback_query(F.data.startswith("grade_"))
async def grade_handler(callback: CallbackQuery, state: FSMContext):
    await start_grading(callback, state)


@dp.message(StateFilter(GradingStates.waiting_for_score))
async def grading_score_handler(message: types.Message, state: FSMContext):
    await process_grading_score(message, state)


@dp.message(StateFilter(GradingStates.waiting_for_comment))
async def grading_comment_handler(message: types.Message, state: FSMContext):
    comment = message.text.strip() if message.text.strip() != '-' else ""

    data = await state.get_data()
    solution_id = data['solution_id']
    score = data['score']
    max_score = data['max_score']

    success = await db.grade_solution(solution_id, score, max_score, comment)

    if success:
        percentage = round((score / max_score) * 100, 1)
        await message.answer(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞!\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{max_score} ({percentage}%)\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        notification_data = await notify_student_grade(solution_id, score, max_score, comment)
        if notification_data:
            await send_grade_notification(notification_data)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏.")

    await state.clear()


@dp.message(Command("help"))
async def help_command(message: types.Message):
    user_id = message.from_user.id

    if await db.is_admin(user_id):
        text = (
            "üîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n"
            "/pending - –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "/users - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n\n"
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏:\n"
            "/create_assignment - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
            "/assignments - –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è\n"
            "/ungraded - –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
    elif await db.is_user_registered(user_id):
        text = (
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/assignments - –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è\n"
            "/assignment <ID> - –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è\n"
            "/progress - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/profile - –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
    else:
        text = (
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/register - –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

    await message.answer(text)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def send_assignment_notifications(notification_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏"""
    difficulty_emoji = {"easy": "üü¢", "medium": "üü°", "hard": "üî¥"}

    for user in notification_data['target_users']:
        try:
            text = (
                f"üÜï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
                f"üìù {notification_data['title']}\n"
                f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty_emoji.get(notification_data['difficulty'], '‚ö°')} {notification_data['difficulty']}\n\n"
                f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å: /assignment {notification_data['assignment_id']}"
            )
            await bot.send_message(user['telegram_id'], text)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}: {e}")


async def send_solution_notification(notification_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º —Ä–µ—à–µ–Ω–∏–∏"""
    try:
        text = (
            f"üì§ –ù–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n\n"
            f"üë§ {notification_data['user_data']['first_name']} {notification_data['user_data']['last_name']} "
            f"({notification_data['user_data']['grade']} –∫–ª–∞—Å—Å)\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {notification_data['assignment']['title']}\n"
            f"üÜî ID —Ä–µ—à–µ–Ω–∏—è: {notification_data['result_id']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ungraded –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )

        await bot.send_message(ADMIN_ID, text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")


async def send_grade_notification(notification_data):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É –æ–± –æ—Ü–µ–Ω–∫–µ"""
    try:
        grade_emoji = "üü¢" if notification_data['percentage'] >= 80 else "üü°" if notification_data[
                                                                                   'percentage'] >= 60 else "üî¥"

        text = (
            f"{grade_emoji} –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!\n\n"
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {notification_data['assignment_title']}\n"
            f"üìä –û—Ü–µ–Ω–∫–∞: {notification_data['score']}/{notification_data['max_score']} ({notification_data['percentage']}%)\n"
        )

        if notification_data['comment']:
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notification_data['comment']}\n"

        text += "\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: /progress"

        await bot.send_message(notification_data['user_id'], text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞: {e}")


async def notify_admin_new_request(request_data):
    """–£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        text = (
            "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
            f"üë§ {request_data['first_name']} {request_data['last_name']}\n"
            f"üéì –ö–ª–∞—Å—Å: {request_data['grade']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request_data['phone']}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫."
        )
        await bot.send_message(ADMIN_ID, text)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.init_db()

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await db.add_admin(ADMIN_ID, "admin", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", is_super_admin=True)

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())