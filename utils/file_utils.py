# utils/file_utils.py
import os
from typing import Optional, Dict, List
from aiogram.types import Message, Document, PhotoSize
from database.db_handler import DatabaseHandler

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
ALLOWED_EXTENSIONS = {
    'pdf': 20 * 1024 * 1024,  # 20 MB
    'doc': 10 * 1024 * 1024,  # 10 MB
    'docx': 10 * 1024 * 1024,  # 10 MB
    'jpg': 5 * 1024 * 1024,  # 5 MB
    'jpeg': 5 * 1024 * 1024,  # 5 MB
    'png': 5 * 1024 * 1024,  # 5 MB
    'gif': 2 * 1024 * 1024,  # 2 MB
    'txt': 1 * 1024 * 1024,  # 1 MB
}

MAX_FILES_PER_OBJECT = 10  # –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –Ω–∞ –æ–±—ä–µ–∫—Ç

db = DatabaseHandler()


class FileProcessor:
    @staticmethod
    def get_file_extension(filename: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        if not filename:
            return ""
        return filename.split('.')[-1].lower()

    @staticmethod
    def is_file_allowed(filename: str, file_size: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Ñ–∞–π–ª"""
        extension = FileProcessor.get_file_extension(filename)

        if extension not in ALLOWED_EXTENSIONS:
            return False, f"‚ùå –§–∞–π–ª—ã .{extension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.\n\n–†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS.keys())}"

        max_size = ALLOWED_EXTENSIONS[extension]
        if file_size > max_size:
            max_mb = max_size / (1024 * 1024)
            return False, f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º –¥–ª—è .{extension}: {max_mb:.0f} –ú–ë"

        return True, "OK"

    @staticmethod
    async def process_message_files(message: Message) -> List[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        files_data = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if message.document:
            file_data = await FileProcessor.process_document(message.document, message.from_user.id)
            if file_data:
                files_data.append(file_data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        if message.photo:
            file_data = await FileProcessor.process_photo(message.photo, message.from_user.id)
            if file_data:
                files_data.append(file_data)

        return files_data

    @staticmethod
    async def process_document(document: Document, user_id: int) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"""
        filename = document.file_name or "document"
        file_size = document.file_size or 0

        is_allowed, error_msg = FileProcessor.is_file_allowed(filename, file_size)
        if not is_allowed:
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É
        file_db_id = await db.save_file(
            file_id=document.file_id,
            file_unique_id=document.file_unique_id,
            file_name=filename,
            file_size=file_size,
            mime_type=document.mime_type or "application/octet-stream",
            file_type="document",
            uploaded_by=user_id
        )

        return {
            'db_id': file_db_id,
            'file_id': document.file_id,
            'file_name': filename,
            'file_size': file_size,
            'file_type': 'photo',
            'mime_type': 'image/jpeg'
        }

    @staticmethod
    async def attach_files_to_object(file_db_ids: List[int], object_type: str, object_id: int):
        """–ü—Ä–∏–≤—è–∑–∞—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–±—ä–µ–∫—Ç—É"""
        for file_db_id in file_db_ids:
            await db.attach_file_to_object(file_db_id, object_type, object_id)

    @staticmethod
    def format_file_list(files: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not files:
            return "üìÅ –§–∞–π–ª–æ–≤ –Ω–µ—Ç"

        text = f"üìÅ –§–∞–π–ª—ã ({len(files)}):\n"
        for i, file_info in enumerate(files, 1):
            file_type_emoji = {
                'document': 'üìÑ',
                'photo': 'üñº',
                'video': 'üé•'
            }.get(file_info['file_type'], 'üìé')

            size_mb = (file_info['file_size'] or 0) / (1024 * 1024)
            uploader = f"{file_info.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} {file_info.get('last_name', '')}"

            text += f"{i}. {file_type_emoji} {file_info['file_name']}"
            if size_mb > 0:
                text += f" ({size_mb:.1f} –ú–ë)"
            text += f"\n   üë§ {uploader}\n"

        return text

    @staticmethod
    def get_file_type_emoji(file_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""
        return {
            'document': 'üìÑ',
            'photo': 'üñº',
            'video': 'üé•'
        }.get(file_type, 'üìé')

    @staticmethod
    async def process_photo(photo_sizes: List[PhotoSize], user_id: int) -> Optional[Dict]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)"""
        if not photo_sizes:
            return None

        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        largest_photo = max(photo_sizes, key=lambda x: x.file_size or 0)

        filename = f"photo_{largest_photo.file_unique_id}.jpg"
        file_size = largest_photo.file_size or 0

        is_allowed, error_msg = FileProcessor.is_file_allowed(filename, file_size)
        if not is_allowed:
            return None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É
        file_db_id = await db.save_file(
            file_id=largest_photo.file_id,
            file_unique_id=largest_photo.file_unique_id,
            file_name=filename,
            file_size=file_size,
            mime_type="image/jpeg",
            file_type="photo",
            uploaded_by=user_id
        )

        return {
            'db_id': file_db_id,
            'file_id': largest_photo.file_id,
            'file_name': filename,
            'file_size': file_size,
            'file_type': 'document',
            'mime_type': 'image/jpeg'

    }